name: ci
on:
  pull_request:

jobs:
  gitleaks:
    runs-on: ubuntu-latest
    outputs:
      summary_b64: ${{ steps.mk_summary.outputs.b64 }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
        continue-on-error: true

      - name: Gitleaks scan
        id: gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
          GITLEAKS_ENABLE_COMMENTS: "true"
          GITLEAKS_NOTIFY_USER_LIST: ${{ vars.GITLEAKS_USERS }}
          GITLEAKS_ENABLE_UPLOAD_ARTIFACT: "false"
          GITLEAKS_ENABLE_SUMMARY: "true"
          GITLEAKS_VERSION: "8.18.4"
        continue-on-error: true

      - name: Build job summary
        id: mk_summary
        if: always()
        run: |
          {
            echo "### Gitleaks"
            echo "- Status: **${{ steps.gitleaks.outcome || 'unknown' }}**"
          } > _gitleaks.md
          b64=$(base64 -w0 _gitleaks.md 2>/dev/null || base64 _gitleaks.md)
          echo "b64=$b64" >> "$GITHUB_OUTPUT"
          cat _gitleaks.md >> "$GITHUB_STEP_SUMMARY"
        continue-on-error: true

  node-ci:
    if: always()
    needs: [gitleaks]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app
    outputs:
      summary_b64: ${{ steps.mk_summary.outputs.b64 }}
    steps:
      - uses: actions/checkout@v4
        continue-on-error: true

      - name: Setup Node
        id: setup_node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: app/package-lock.json
        continue-on-error: true

      - name: Install
        id: install
        run: npm ci
        continue-on-error: true

      - name: Lint
        id: lint
        run: |
          if npm run | grep -q "^  lint"; then npm run lint; else echo "no lint script, skipping"; fi
        continue-on-error: true

      - name: TypeScript build (compile check)
        id: build
        run: |
          if [ -f tsconfig.json ] || grep -q "tsc" package.json; then npm run build; else echo "no tsc, skipping"; fi
        continue-on-error: true

      - name: Unit tests
        id: test
        run: |
          if npm run | grep -q "^  test"; then npm test -- --ci --reporters=default; else echo "no tests, skipping"; fi
        continue-on-error: true

      - name: npm audit (non-blocking)
        id: audit
        run: npm audit --audit-level=high || true
        continue-on-error: true

      - name: Build job summary
        id: mk_summary
        if: always()
        run: |
          {
            echo "### Node (app/)"
            echo "- Install: **${{ steps.install.outcome || 'unknown' }}**"
            echo "- Lint: **${{ steps.lint.outcome || 'unknown' }}**"
            echo "- Build: **${{ steps.build.outcome || 'unknown' }}**"
            echo "- Tests: **${{ steps.test.outcome || 'unknown' }}**"
            echo "- Audit(>=high): **${{ steps.audit.outcome || 'unknown' }}**"
          } > _node.md
          b64=$(base64 -w0 _node.md 2>/dev/null || base64 _node.md)
          echo "b64=$b64" >> "$GITHUB_OUTPUT"
          cat _node.md >> "$GITHUB_STEP_SUMMARY"
        continue-on-error: true

  container-scan:
    if: always()
    needs: [node-ci]
    runs-on: ubuntu-latest
    outputs:
      summary_b64: ${{ steps.mk_summary.outputs.b64 }}
    steps:
      - uses: actions/checkout@v4
        continue-on-error: true

      - name: Build image (no push)
        id: build_img
        run: |
          docker build \
            -f app/Dockerfile \
            -t secure-node-api:${{ github.run_id }}-${{ github.run_number }} \
            --label org.opencontainers.image.revision=${{ github.sha }} \
            app
        continue-on-error: true

      - name: Trivy scan
        id: trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: secure-node-api:${{ github.run_id }}-${{ github.run_number }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          hide-progress: true
          output: scan-report.txt
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
        continue-on-error: true

      - name: Publish Trivy summary
        run: |
          if [[ -s scan-report.txt ]]; then
            {
              echo "### Container Vulnerability Report"
              echo "<details><summary>Click to expand</summary>"
              echo
              echo '```'
              cat scan-report.txt
              echo '```'
              echo "</details>"
            } >> "$GITHUB_STEP_SUMMARY"
          fi
        continue-on-error: true

      - name: Build job summary
        id: mk_summary
        if: always()
        run: |
          CRIT=$(grep -E '\bCRITICAL\b' scan-report.txt 2>/dev/null | wc -l || true)
          HIGH=$(grep -E '\bHIGH\b' scan-report.txt 2>/dev/null | wc -l || true)
          {
            echo "### Container Scan"
            echo "- Build: **${{ steps.build_img.outcome || 'unknown' }}**"
            echo "- Trivy: **${{ steps.trivy.outcome || 'unknown' }}** (Critical: ${CRIT:-0}, High: ${HIGH:-0})"
          } > _scan.md
          b64=$(base64 -w0 _scan.md 2>/dev/null || base64 _scan.md)
          echo "b64=$b64" >> "$GITHUB_OUTPUT"
          cat _scan.md >> "$GITHUB_STEP_SUMMARY"
        continue-on-error: true

  terraform-checks:
    if: always()
    needs: [gitleaks]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra
    outputs:
      summary_b64: ${{ steps.mk_summary.outputs.b64 }}
    steps:
      - uses: actions/checkout@v4
        continue-on-error: true

      - uses: hashicorp/setup-terraform@v3
        with: { terraform_version: 1.7.5 }
        continue-on-error: true

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform init (no backend)
        id: init
        run: terraform init -backend=false -input=false
        continue-on-error: true

      - name: Terraform validate
        id: validate
        run: terraform validate -no-color
        continue-on-error: true

      - name: tfsec (non-blocking)
        id: tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          full_repo_scan: true
          soft_fail: true
        continue-on-error: true

      - name: Build job summary
        id: mk_summary
        if: always()
        run: |
          {
            echo "### Terraform (infra/)"
            echo "- fmt: **${{ steps.fmt.outcome || 'unknown' }}**"
            echo "- init: **${{ steps.init.outcome || 'unknown' }}**"
            echo "- validate: **${{ steps.validate.outcome || 'unknown' }}**"
            echo "- tfsec: **${{ steps.tfsec.outcome || 'unknown' }}**"
          } > _tf.md
          b64=$(base64 -w0 _tf.md 2>/dev/null || base64 _tf.md)
          echo "b64=$b64" >> "$GITHUB_OUTPUT"
          cat _tf.md >> "$GITHUB_STEP_SUMMARY"
        continue-on-error: true

  pr-summary:
    if: always()
    needs: [gitleaks, node-ci, container-scan, terraform-checks]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Combine summaries
        id: combine
        env:
          GITLEAKS:  ${{ needs.gitleaks.outputs.summary_b64 }}
          NODE:      ${{ needs['node-ci'].outputs.summary_b64 }}
          SCAN:      ${{ needs['container-scan'].outputs.summary_b64 }}
          TF:        ${{ needs['terraform-checks'].outputs.summary_b64 }}
        run: |
          decode() { [ -n "$1" ] && (echo "$1" | base64 -d 2>/dev/null || echo "$1" | base64 --decode); }
          {
            echo "## CI Summary"
            echo
            decode "$GITLEAKS"
            echo
            decode "$NODE"
            echo
            decode "$SCAN"
            echo
            decode "$TF"
            echo
            echo "_All steps run with continue-on-error; check logs for details._"
          } > ci_summary.md
          cat ci_summary.md >> "$GITHUB_STEP_SUMMARY"
        continue-on-error: true

      - name: Upsert PR comment
        uses: actions/github-script@v7
        env:
          BODY_PATH: ci_summary.md
        with:
          script: |
            const fs = require('fs');
            const bodyContent = fs.readFileSync(process.env.BODY_PATH, 'utf8');
            const marker = '<!-- ci-quick-summary -->';
            const body = `${marker}\n${bodyContent}`;
            const {owner, repo} = context.repo;

            let prNumber = context.payload.pull_request?.number;
            if (!prNumber) {
              const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
                owner, repo, commit_sha: context.sha,
              });
              if (prs.data.length) prNumber = prs.data[0].number;
            }
            if (!prNumber) { core.info('No PR found; skipping comment.'); return; }

            const comments = await github.rest.issues.listComments({owner, repo, issue_number: prNumber, per_page: 100});
            const existing = comments.data.find(c => c.body && c.body.includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({owner, repo, comment_id: existing.id, body});
            } else {
              await github.rest.issues.createComment({owner, repo, issue_number: prNumber, body});
            }
        continue-on-error: true
