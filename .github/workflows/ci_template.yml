name: ci

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  detect-paths:
    runs-on: ubuntu-latest
    outputs:
      app: ${{ steps.changes.outputs.app }}
      infra: ${{ steps.changes.outputs.infra }}
    steps:
      - uses: actions/checkout@v4
        continue-on-error: true
      - id: changes
        uses: dorny/paths-filter@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            app:
              - 'app/**'
              - 'app/Dockerfile'
            infra:
              - 'infra/**'
        continue-on-error: true

  build-test-image-and-scan:
    needs: detect-paths
    if: ${{ needs.detect-paths.outputs.app == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
        continue-on-error: true

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: app/package-lock.json
        continue-on-error: true

      - name: Install deps
        working-directory: app
        run: npm ci
        continue-on-error: true

      - name: Lint
        working-directory: app
        run: |
          if npm run | grep -q "^  lint"; then npm run lint; else echo "no lint script, skipping"; fi
        continue-on-error: true

      - name: Build image
        run: docker build -t local/app:ci ./app
        continue-on-error: true

      - name: Trivy scan (image) — SARIF
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: 'local/app:ci'
          format: 'sarif'
          output: trivy-image.sarif
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'
        continue-on-error: true

      - name: Upload Trivy SARIF (image)
        uses: github/codeql-action/upload-sarif@v3
        with: { sarif_file: trivy-image.sarif }
        continue-on-error: true

      - name: Save app CI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-artifacts
          path: |
            trivy-image.sarif
        continue-on-error: true

  infra-plan-and-scans:
    needs: detect-paths
    if: ${{ needs.detect-paths.outputs.infra == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
        continue-on-error: true

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with: { terraform_version: 1.7.5 }
        continue-on-error: true

      - name: Terraform fmt & validate (no backend)
        working-directory: infra
        run: |
          terraform fmt -check -recursive || true
          terraform init -backend=false || true
          terraform validate || true
        continue-on-error: true

      - name: Install tflint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash || true
          tflint --init || true
        continue-on-error: true

      - name: tflint
        working-directory: infra
        run: tflint || true
        continue-on-error: true

      # ✅ tfsec (Terraform security) — outputs SARIF to Code Scanning
      - name: tfsec (Terraform security) — SARIF
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: infra
          soft_fail: true
          additional_args: >-
            --format sarif
            --out tfsec.sarif
            --minimum-severity HIGH
        continue-on-error: true

      - name: Upload tfsec SARIF
        uses: github/codeql-action/upload-sarif@v3
        with: { sarif_file: tfsec.sarif }
        continue-on-error: true

      - name: Trivy config scan (Terraform)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'config'
          scan-ref: './infra'
          format: 'sarif'
          output: trivy-infra.sarif
          severity: 'CRITICAL,HIGH,MEDIUM'
        continue-on-error: true

      - name: Upload Trivy SARIF (infra)
        uses: github/codeql-action/upload-sarif@v3
        with: { sarif_file: trivy-infra.sarif }
        continue-on-error: true

      - name: Terraform plan (no backend) — capture
        id: plan
        working-directory: infra
        env:
          TF_CLI_ARGS_plan: "-no-color"
        run: |
          terraform plan -no-color -input=false -out=tfplan || true
          terraform show -no-color tfplan > ../TFPLAN.txt || true
        continue-on-error: true

      - name: Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Save infra artifacts
        uses: actions/upload-artifact@v4
        with:
          name: infra-artifacts
          path: |
            TFPLAN.txt
            tfsec.sarif
            trivy-infra.sarif
        continue-on-error: true

  pr-summary-comment:
    needs: [detect-paths, build-test-image-and-scan, infra-plan-and-scans]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        continue-on-error: true

      - name: Download app artifacts
        if: ${{ needs.detect-paths.outputs.app == 'true' && always() }}
        uses: actions/download-artifact@v4
        with:
          name: app-artifacts
          path: app-artifacts
        continue-on-error: true

      - name: Download infra artifacts
        if: ${{ needs.detect-paths.outputs.infra == 'true' && always() }}
        uses: actions/download-artifact@v4
        with:
          name: infra-artifacts
          path: infra-artifacts
        continue-on-error: true

      - name: Build PR report
        id: report
        run: |
          echo "## CI Summary" > REPORT.md
          echo "" >> REPORT.md

          if [ -d app-artifacts ]; then
            echo "### Application" >> REPORT.md
            echo "- Trivy (image): SARIF uploaded to **Code scanning alerts**" >> REPORT.md
            echo "" >> REPORT.md
          fi

          if [ -d infra-artifacts ]; then
            echo "### Infrastructure" >> REPORT.md
            echo "<details><summary>Terraform Plan (no backend)</summary>" >> REPORT.md
            echo "" >> REPORT.md
            if [ -f infra-artifacts/TFPLAN.txt ]; then
              { head -n 200 infra-artifacts/TFPLAN.txt; echo; echo '...'; tail -n 200 infra-artifacts/TFPLAN.txt; } >> REPORT.md
            else
              echo "_No plan captured._" >> REPORT.md
            fi
            echo "</details>" >> REPORT.md
            echo "" >> REPORT.md
            echo "- tflint, **tfsec**, Trivy (config), and Gitleaks: SARIF uploaded to **Code scanning alerts**" >> REPORT.md
          fi

          echo "report_path=REPORT.md" >> $GITHUB_OUTPUT
          cat REPORT.md >> $GITHUB_STEP_SUMMARY
        continue-on-error: true

      - name: Post/update PR comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          path: ${{ steps.report.outputs.report_path }}
        continue-on-error: true
